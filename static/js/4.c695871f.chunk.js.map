{"version":3,"sources":["components/Login/Login.module.css","components/Login/fieldCreator.tsx","components/Login/Login.tsx","Hoc/withProfileRedirect.js","components/Login/LoginContainer.tsx"],"names":["module","exports","fieldCreator","name","validator","type","placeholder","label","validate","composeValidators","input","meta","error","touched","className","styles","redBorder","errorMessage","Login","authorization","loginError","captcha","onSubmit","values","email","password","rememberMe","render","handleSubmit","form","submitting","pristine","validators","required","emailValidation","minLength","component","src","alt","createField","disabled","onClick","reset","mapStateToProps","state","isAuth","auth","withProfileRedirect","Component","RedirectComponent","this","props","to","React","connect","compose"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,aAAe,4BAA4B,UAAY,yBAAyB,WAAa,4B,oHCKxG,SAASC,EAA2CC,EAC9BC,EACAC,EACAC,EACAC,GAC3B,OACI,cAAC,IAAD,CAAOJ,KAAMA,EAAMK,SAAUC,IAAiB,WAAjB,cAAqBL,IAAlD,SACG,gBAAEM,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAT,OACG,gCACE,gCAAQJ,IAENI,EAAKC,OAASD,EAAKE,QACb,qCACA,iDAAWH,GAAX,IAAkBL,KAAMA,EAAMC,YAAaA,EAAaQ,UAAWC,IAAOC,aAC1E,sBAAMF,UAAWC,IAAOE,aAAxB,SAAuCN,EAAKC,WAE5C,iDAAWF,GAAX,IAAkBL,KAAMA,EAAMC,YAAaA,W,YCkClDY,EAtCT,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,QAC/B,OACI,gCACI,uCAGA,cAAC,IAAD,CACIC,SAAU,SAACC,GACPJ,EAAcI,EAAOC,MAAOD,EAAOE,SAAUF,EAAOG,WAAYH,EAAOF,UAE3EM,OAAQ,gBAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,WAAYC,EAAlC,EAAkCA,SAAlC,EAA4CR,OAA5C,OACJ,uBAAMD,SAAUM,EAAhB,UACK1B,EAA8B,QAAS,CAAC8B,IAAWC,SAAUD,IAAWE,iBAAkB,OAAQ,QAAS,SAC3GhC,EAA8B,WAAY,CAAC8B,IAAWC,SAAUD,IAAWG,UAAU,IAAK,WAAY,WAAY,YACnH,gCACI,iDACA,cAAC,IAAD,CAAOhC,KAAK,aAAaiC,UAAU,QAAQ/B,KAAK,gBAEnDgB,GAAW,qBAAKgB,IAAKhB,EAASiB,IAAI,YAClCjB,GAAWkB,YAAY,UAAW,QAAS,OAAQ,0BAA2B,cAC/E,gCACI,wBAAQlC,KAAK,SAASmC,SAAUV,GAAcC,EAA9C,oBAGA,wBAAQ1B,KAAK,SACLoC,QAASZ,EAAKa,MACdF,SAAUV,GAAcC,EAFhC,sBAMHX,GAAc,qBAAKN,UAAWC,IAAOK,WAAvB,SAAoCA,c,gEC5CrEuB,EAAkB,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAME,KAAKD,SAwBRE,EApBa,SAACC,GAAe,IACpCC,EADmC,uKAGrC,OAAIC,KAAKC,MAAMN,OAAe,cAAC,IAAD,CAAUO,GAAG,aACpC,cAACJ,EAAD,eAAeE,KAAKC,YAJU,GACTE,IAAML,WAOtC,OAD0CM,YAAQX,EAARW,CAAyBL,ICQtDM,sBACXD,aANoB,SAACV,GAAD,MAAkD,CACxExB,WAAYwB,EAAME,KAAK1B,WACvBC,QAASuB,EAAME,KAAKzB,WAIsF,CAACF,oBACzG4B,EAFWQ,CAGbrC","file":"static/js/4.c695871f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"Login_errorMessage__1OEWS\",\"redBorder\":\"Login_redBorder__2R5Ja\",\"loginError\":\"Login_loginError__35ORj\"};","import {composeValidators} from \"../Common/FormValidation/FormValidation\";\r\nimport {Field} from \"react-final-form\";\r\nimport React from \"react\";\r\nimport styles from \"./Login.module.css\";\r\nimport {ValidatorType} from \"../Common/FormValidation/FormValidation\"\r\n\r\nexport function fieldCreator<FieldKeysType extends string>(name: FieldKeysType,  // generic-функция\r\n                             validator: Array<ValidatorType>,\r\n                             type: string,\r\n                             placeholder: string,\r\n                             label: string): React.ReactNode {\r\n  return (\r\n      <Field name={name} validate={composeValidators(...validator)}>\r\n        {({input, meta}) => (\r\n            <div>\r\n              <label>{label}</label>\r\n              {\r\n                meta.error && meta.touched\r\n                    ? <>\r\n                      <input {...input} type={type} placeholder={placeholder} className={styles.redBorder}/>\r\n                      <span className={styles.errorMessage}>{meta.error}</span>\r\n                    </>\r\n                    : <input {...input} type={type} placeholder={placeholder}/>\r\n              }\r\n            </div>\r\n        )}\r\n      </Field>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport {Form, Field} from 'react-final-form';\r\nimport styles from \"./Login.module.css\"\r\nimport {validators} from \"../Common/FormValidation/FormValidation\";\r\nimport {fieldCreator} from \"./fieldCreator\";\r\nimport createField from \"../Common/createField\";\r\nimport {LoginMapDispatchPropsType, LoginMapStatePropsType} from \"./LoginContainer\";\r\n\r\ninterface LoginValues {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nexport type LoginValuesKeys = Extract<keyof LoginValues, string>;  // выбираются только те ключи, которые имеют тип string\r\n\r\nconst Login: React.FC<LoginMapStatePropsType & LoginMapDispatchPropsType>\r\n    = ({authorization, loginError, captcha}) => {\r\n    return (\r\n        <div>\r\n            <h1>\r\n                Login\r\n            </h1>\r\n            <Form\r\n                onSubmit={(values: LoginValues) => {\r\n                    authorization(values.email, values.password, values.rememberMe, values.captcha);\r\n                }}\r\n                render={({handleSubmit, form, submitting, pristine, values}) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        {fieldCreator<LoginValuesKeys>(\"email\", [validators.required, validators.emailValidation], \"text\", \"email\", \"Login\")}\r\n                        {fieldCreator<LoginValuesKeys>(\"password\", [validators.required, validators.minLength(6)], \"password\", \"Password\", \"Password\")}\r\n                        <div>\r\n                            <label>Remember me </label>\r\n                            <Field name=\"rememberMe\" component=\"input\" type=\"checkbox\"/>\r\n                        </div>\r\n                        {captcha && <img src={captcha} alt=\"captcha\"/>}\r\n                        {captcha && createField(\"captcha\", \"input\", \"text\", \"type symbols from image\", \"Image text\")}\r\n                        <div>\r\n                            <button type=\"submit\" disabled={submitting || pristine}>\r\n                                Submit\r\n                            </button>\r\n                            <button type=\"button\"\r\n                                    onClick={form.reset as any}                 // костыль, не знаю как исправить\r\n                                    disabled={submitting || pristine}>\r\n                                Reset\r\n                            </button>\r\n                        </div>\r\n                        {loginError && <div className={styles.loginError}>{loginError}</div>}\r\n                    </form>\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\nconst withProfileRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (this.props.isAuth) return <Redirect to=\"/Profile\" />\r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n  const ConnectedProfileRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n  return ConnectedProfileRedirectComponent;\r\n}\r\n\r\n// const withAuthRedirect = (Component) => {\r\n//   const RedirectComponent = (props) => {\r\n//     if (!props.isAuth) return <Redirect to=\"/Login\" />\r\n//     return <Component {...props} />\r\n//   }\r\n//   const ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n//   return ConnectedAuthRedirectComponent;\r\n// }\r\n\r\nexport default withProfileRedirect\r\n","import Login from \"./Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {authorization} from \"../../redux/auth-reducer\";\r\nimport {compose} from \"redux\";\r\nimport withProfileRedirect from \"../../Hoc/withProfileRedirect\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nexport type LoginMapStatePropsType = {\r\n  loginError: string | null\r\n  captcha: string | null\r\n}\r\n\r\nexport type LoginMapDispatchPropsType = {\r\n  authorization: (email: string, password: string, rememberMe: boolean, captchaUrl: string) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): LoginMapStatePropsType => ({\r\n  loginError: state.auth.loginError,\r\n  captcha: state.auth.captcha\r\n})\r\n\r\nexport default compose(\r\n    connect<LoginMapStatePropsType, LoginMapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {authorization}),\r\n    withProfileRedirect\r\n)(Login)\r\n\r\n\r\n\r\n"],"sourceRoot":""}