{"version":3,"sources":["Hoc/withProfileRedirect.tsx","components/Login/Login.tsx"],"names":["mapStateToProps","state","isAuth","auth","withProfileRedirect","Component","RedirectComponent","this","props","to","React","connect","dispatch","useDispatch","loginError","useSelector","captcha","onSubmit","values","email","password","rememberMe","captchaUrl","authorization","render","handleSubmit","form","submitting","pristine","fieldCreator","validators","required","emailValidation","minLength","name","component","type","src","alt","disabled","onClick","reset","className","styles"],"mappings":"iQASMA,EAAkB,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAME,KAAKD,SAwBRE,EApBa,SAACC,GAAoC,IACzDC,EADwD,uKAG1D,OAAIC,KAAKC,MAAMN,OAAe,cAAC,IAAD,CAAUO,GAAG,aACpC,cAACJ,EAAD,eAAeE,KAAKC,YAJ+B,GAC9BE,IAAML,WAOtC,OAD0CM,YAAQX,EAARW,CAAyBL,IC6CtDF,aAhDS,WAEtB,IAAMQ,EAAWC,cAEXC,EAAaC,aAAY,SAACd,GAAD,OAAyBA,EAAME,KAAKW,cAC7DE,EAAUD,aAAY,SAACd,GAAD,OAAyBA,EAAME,KAAKa,WAMhE,OACE,gCACE,uCAGA,cAAC,IAAD,CACEC,SAAU,SAACC,GAVM,IAACC,EAAeC,EAAkBC,EAAqBC,EAAtDH,EAWDD,EAAOC,MAXSC,EAWFF,EAAOE,SAXaC,EAWHH,EAAOG,WAXiBC,EAWLJ,EAAOF,QAV9EJ,EAASW,YAAcJ,EAAOC,EAAUC,EAAYC,KAYhDE,OAAQ,gBAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,WAAYC,EAAlC,EAAkCA,SAAlC,EAA4CV,OAA5C,OACN,uBAAMD,SAAUQ,EAAhB,UACGI,YAA8B,QAAS,QAAS,CAACC,IAAWC,SAAUD,IAAWE,iBAAkB,OAAQ,QAAS,SACpHH,YAA8B,QAAS,WAAY,CAACC,IAAWC,SAAUD,IAAWG,UAAU,IAAK,WAAY,WAAY,YAC5H,gCACE,iDACA,cAAC,IAAD,CAAOC,KAAK,aAAaC,UAAU,QAAQC,KAAK,gBAEjDpB,GAAW,qBAAKqB,IAAKrB,EAASsB,IAAI,YAClCtB,GAAWa,YAA8B,QAAS,UAAW,GAAI,OAAQ,0BAA2B,cACrG,gCACE,wBAAQO,KAAK,SAASG,SAAUZ,GAAcC,EAA9C,oBAGA,wBAAQQ,KAAK,SACLI,QAASd,EAAKe,MACdF,SAAUZ,GAAcC,EAFhC,sBAMDd,GAAc,qBAAK4B,UAAWC,IAAO7B,WAAvB,SAAoCA","file":"static/js/4.a461beea.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateType = {\r\n  isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\nconst withProfileRedirect = (Component: React.ComponentType) => {\r\n  class RedirectComponent extends React.Component<MapStateType> {\r\n    render() {\r\n      if (this.props.isAuth) return <Redirect to=\"/Profile\" />\r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n  const ConnectedProfileRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n  return ConnectedProfileRedirectComponent;\r\n}\r\n\r\n// const withAuthRedirect = (Component) => {\r\n//   const RedirectComponent = (props) => {\r\n//     if (!props.isAuth) return <Redirect to=\"/Login\" />\r\n//     return <Component {...props} />\r\n//   }\r\n//   const ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n//   return ConnectedAuthRedirectComponent;\r\n// }\r\n\r\nexport default withProfileRedirect\r\n","import React from \"react\";\r\nimport {Form, Field} from 'react-final-form';\r\nimport styles from \"./Login.module.css\"\r\nimport {validators} from \"../Common/FormValidation/FormValidation\";\r\nimport {fieldCreator} from \"../Common/fieldCreator\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {authorization} from \"../../redux/auth-reducer\";\r\nimport withProfileRedirect from \"../../Hoc/withProfileRedirect\";\r\n\r\ninterface FormValues {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string\r\n}\r\n\r\nexport type LoginValuesKeys = Extract<keyof FormValues, string>;  // выбираются только те ключи, которые имеют тип string\r\n\r\nconst Login: React.FC = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const loginError = useSelector((state: AppStateType) => state.auth.loginError)\r\n  const captcha = useSelector((state: AppStateType) => state.auth.captcha)\r\n\r\n  const authorization_ = (email: string, password: string, rememberMe: boolean, captchaUrl: string) => {\r\n    dispatch(authorization(email, password, rememberMe, captchaUrl))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        Login\r\n      </h1>\r\n      <Form\r\n        onSubmit={(values: FormValues) => {\r\n          authorization_(values.email, values.password, values.rememberMe, values.captcha);\r\n        }}\r\n        render={({handleSubmit, form, submitting, pristine, values}) => (\r\n          <form onSubmit={handleSubmit}>\r\n            {fieldCreator<LoginValuesKeys>(\"input\", \"email\", [validators.required, validators.emailValidation], \"text\", \"email\", \"Login\")}\r\n            {fieldCreator<LoginValuesKeys>(\"input\", \"password\", [validators.required, validators.minLength(6)], \"password\", \"Password\", \"Password\")}\r\n            <div>\r\n              <label>Remember me </label>\r\n              <Field name=\"rememberMe\" component=\"input\" type=\"checkbox\"/>\r\n            </div>\r\n            {captcha && <img src={captcha} alt=\"captcha\"/>}\r\n            {captcha && fieldCreator<LoginValuesKeys>(\"input\", \"captcha\", [], \"text\", \"type symbols from image\", \"Image text\")}\r\n            <div>\r\n              <button type=\"submit\" disabled={submitting || pristine}>\r\n                Submit\r\n              </button>\r\n              <button type=\"button\"\r\n                      onClick={form.reset as any}                 // костыль, не знаю как исправить\r\n                      disabled={submitting || pristine}>\r\n                Reset\r\n              </button>\r\n            </div>\r\n            {loginError && <div className={styles.loginError}>{loginError}</div>}\r\n          </form>\r\n        )}\r\n      />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default withProfileRedirect(Login) as React.ComponentType;\r\n"],"sourceRoot":""}